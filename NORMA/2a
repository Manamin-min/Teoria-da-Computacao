//2a) foo(x) = 2x, x^2

operation clear(U) {
    1: if zero U then goto 0 else goto 2
    2: do dec U goto 1
}

// K = K + L
operation add(K, L) {
    1: if zero L then goto 5 else goto 2
    2: do dec L goto 3
    3: do inc K goto 4
    4: do inc C goto 1
    5: if zero C then goto 0 else goto 6
    6: do dec C goto 7
    7: do inc L goto 5
}

// A = B
operation load(A, B) {
    1: do clear(A) goto 2
    2: do add(A, B) goto 0
}

// I = I - J
operation sub(I, J){
    1: do load(I1, I) goto 2
    2: do load(J1, J) goto 3
    3: if zero J1 then goto 7 else goto 4
    4: if zero I1 then goto 7 else goto 5 
    5: do dec I1 goto 6
    6: do dec J1 goto 3
    7: do load(I, I1) goto 0
}

test ehUm(NUM){
    1: do load(N, NUM) goto 2
    2: do dec N goto 3
    3: if zero N then goto true else goto false
}

// A = A/B
operation div(A, B) {
    1: do clear(Q) goto 2
    2: if zero A then goto 7 else goto 3
    3: if zero B then goto 7 else goto 4

    4: do sub(A, B) goto 5
    5: do inc Q goto 6
    6: if zero A then goto 7 else goto 4
    7: do load(A, Q) goto 0
}

// Testa se F < G
test lessThan(F, G) {
    1: do load(F1, F) goto 2
    2: do load(G1, G) goto 3

    // loop principal de teste se F1 ou G1 já chegou em 0
    3: if zero F1 then goto 4 else goto 5
    4: if zero G1 then goto false else goto true
    5: if zero G1 then goto false else goto 6

    6: do dec F1 goto 7
    7: do dec G1 goto 3
}

// A = dividendo, B = divisor, R = resto
operation divMod(A, B, R, Q) {
    1: do clear(R) goto 2
    2: do clear(Q) goto 3
    3: if zero A then goto 0 else goto 4
    
    4: if zero B then goto 0 else goto 5
    
    5: do load(R, A) goto 6

    // laço principal
    6: if lessThan(R, B) then goto 0 else goto 7
    7: do inc Q goto 8
    8: do sub(R, B) goto 6

}

test ehPar(NUM){
    1: do load(NUM1, NUM) goto 2
    2: do divMod(NUM1, DOIS, R, Q) goto 3
    3: if zero R then goto true else goto false
}

operation mult(A,B){
	1: do clear(M) goto 2
	2: do load(MM,B) goto 3
	3: do add(M,A) goto 4
	4: do dec MM goto 5
	5: if zero MM then goto 6 else goto 3
	6: do load(A,M) goto 0
}

operation pow(BASE, EXP, RESULT) {
  1: do clear(RESULT) goto 2
  2: do inc RESULT goto 3
  3: do load(E, EXP) goto 4
  4: if zero E then goto 0 else goto 5
  5: do mult(RESULT, BASE) goto 6
  6: do dec E goto 4
}

operation pow2(A, SAIDA) {
  1: do load(BASE, DOIS) goto 2
  2: do pow(BASE, A, SAIDA) goto 0
}


operation xImpar(X1, B){
    1: do dec X1 goto 2
    2: do div(X1, DOIS) goto 3
    3: do load(B, X1) goto 0
}

operation foo(X1, DOISX, XQUADRADO){
    1: do load(X1_COPIA, X1) goto 2
    2: do mult(X1_COPIA, DOIS) goto 3
    3: do load(DOISX, X1_COPIA) goto 4
    4: do pow(X1, DOIS, XQUADRADO) goto 0
}

// decod: chama codA e xImpar
operation decod(C, A_in, B_in) {
    1: do load(B1, B_in) goto 2
    2: do mult(B1, DOIS) goto 3
    3: do inc B1 goto 4
    4: do load(A1, A_in) goto 5
    5: do pow2(A1, POT2) goto 6
    6: do mult(POT2, B1) goto 7
    7: do load(C, POT2) goto 0
}

main{
    1: do clear(DOIS) goto 2
    2: do add DOIS 2 goto 3
    3: do clear(UM) goto 4
    4: do inc UM goto 5
    5: do load(Xcopia, X) goto 6

    6: do foo(Xcopia, Xdois, Xquatrado) goto 7
    7: do decod(Y, Xdois, Xquatrado) goto 0
}
